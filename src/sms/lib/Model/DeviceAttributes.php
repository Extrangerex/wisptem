<?php
/**
 * DeviceAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  SMSGatewayMe\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SMSGatewayMe\Client\Model;

use \ArrayAccess;
/**
 * DeviceAttributes Class Doc Comment
 *
 * @category    Class
 * @description Device attributes
 * @package     SMSGatewayMe\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeviceAttributes implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'phoneNumber' => 'string',
        'make' => 'string',
        'model' => 'string',
        'provider' => 'string',
        'country' => 'string',
        'connectionType' => 'string',
        'battery' => 'string',
        'signalPercent' => 'string',
        'wifi' => 'bool',
        'lat' => 'string',
        'lng' => 'string',
        'lastSeen' => '\DateTime'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'phoneNumber' => 'phone_number',
        'make' => 'make',
        'model' => 'model',
        'provider' => 'provider',
        'country' => 'country',
        'connectionType' => 'connection_type',
        'battery' => 'battery',
        'signalPercent' => 'signal_percent',
        'wifi' => 'wifi',
        'lat' => 'lat',
        'lng' => 'lng',
        'lastSeen' => 'last_seen'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'phoneNumber' => 'setPhoneNumber',
        'make' => 'setMake',
        'model' => 'setModel',
        'provider' => 'setProvider',
        'country' => 'setCountry',
        'connectionType' => 'setConnectionType',
        'battery' => 'setBattery',
        'signalPercent' => 'setSignalPercent',
        'wifi' => 'setWifi',
        'lat' => 'setLat',
        'lng' => 'setLng',
        'lastSeen' => 'setLastSeen'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'phoneNumber' => 'getPhoneNumber',
        'make' => 'getMake',
        'model' => 'getModel',
        'provider' => 'getProvider',
        'country' => 'getCountry',
        'connectionType' => 'getConnectionType',
        'battery' => 'getBattery',
        'signalPercent' => 'getSignalPercent',
        'wifi' => 'getWifi',
        'lat' => 'getLat',
        'lng' => 'getLng',
        'lastSeen' => 'getLastSeen'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $phoneNumber 
      * @var string
      */
    protected $phoneNumber;
    
    /**
      * $make 
      * @var string
      */
    protected $make;
    
    /**
      * $model 
      * @var string
      */
    protected $model;
    
    /**
      * $provider 
      * @var string
      */
    protected $provider;
    
    /**
      * $country 
      * @var string
      */
    protected $country;
    
    /**
      * $connectionType 
      * @var string
      */
    protected $connectionType;
    
    /**
      * $battery 
      * @var string
      */
    protected $battery;
    
    /**
      * $signalPercent 
      * @var string
      */
    protected $signalPercent;
    
    /**
      * $wifi 
      * @var bool
      */
    protected $wifi;
    
    /**
      * $lat 
      * @var string
      */
    protected $lat;
    
    /**
      * $lng 
      * @var string
      */
    protected $lng;
    
    /**
      * $lastSeen 
      * @var \DateTime
      */
    protected $lastSeen;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->phoneNumber = $data["phoneNumber"];
            $this->make = $data["make"];
            $this->model = $data["model"];
            $this->provider = $data["provider"];
            $this->country = $data["country"];
            $this->connectionType = $data["connectionType"];
            $this->battery = $data["battery"];
            $this->signalPercent = $data["signalPercent"];
            $this->wifi = $data["wifi"];
            $this->lat = $data["lat"];
            $this->lng = $data["lng"];
            $this->lastSeen = $data["lastSeen"];
        }
    }
    
    /**
     * Gets phoneNumber
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phoneNumber;
    }
  
    /**
     * Sets phoneNumber
     * @param string $phoneNumber 
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        
        $this->phoneNumber = $phoneNumber;
        return $this;
    }
    
    /**
     * Gets make
     * @return string
     */
    public function getMake()
    {
        return $this->make;
    }
  
    /**
     * Sets make
     * @param string $make 
     * @return $this
     */
    public function setMake($make)
    {
        
        $this->make = $make;
        return $this;
    }
    
    /**
     * Gets model
     * @return string
     */
    public function getModel()
    {
        return $this->model;
    }
  
    /**
     * Sets model
     * @param string $model 
     * @return $this
     */
    public function setModel($model)
    {
        
        $this->model = $model;
        return $this;
    }
    
    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->provider;
    }
  
    /**
     * Sets provider
     * @param string $provider 
     * @return $this
     */
    public function setProvider($provider)
    {
        
        $this->provider = $provider;
        return $this;
    }
    
    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param string $country 
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Gets connectionType
     * @return string
     */
    public function getConnectionType()
    {
        return $this->connectionType;
    }
  
    /**
     * Sets connectionType
     * @param string $connectionType 
     * @return $this
     */
    public function setConnectionType($connectionType)
    {
        
        $this->connectionType = $connectionType;
        return $this;
    }
    
    /**
     * Gets battery
     * @return string
     */
    public function getBattery()
    {
        return $this->battery;
    }
  
    /**
     * Sets battery
     * @param string $battery 
     * @return $this
     */
    public function setBattery($battery)
    {
        
        $this->battery = $battery;
        return $this;
    }
    
    /**
     * Gets signalPercent
     * @return string
     */
    public function getSignalPercent()
    {
        return $this->signalPercent;
    }
  
    /**
     * Sets signalPercent
     * @param string $signalPercent 
     * @return $this
     */
    public function setSignalPercent($signalPercent)
    {
        
        $this->signalPercent = $signalPercent;
        return $this;
    }
    
    /**
     * Gets wifi
     * @return bool
     */
    public function getWifi()
    {
        return $this->wifi;
    }
  
    /**
     * Sets wifi
     * @param bool $wifi 
     * @return $this
     */
    public function setWifi($wifi)
    {
        
        $this->wifi = $wifi;
        return $this;
    }
    
    /**
     * Gets lat
     * @return string
     */
    public function getLat()
    {
        return $this->lat;
    }
  
    /**
     * Sets lat
     * @param string $lat 
     * @return $this
     */
    public function setLat($lat)
    {
        
        $this->lat = $lat;
        return $this;
    }
    
    /**
     * Gets lng
     * @return string
     */
    public function getLng()
    {
        return $this->lng;
    }
  
    /**
     * Sets lng
     * @param string $lng 
     * @return $this
     */
    public function setLng($lng)
    {
        
        $this->lng = $lng;
        return $this;
    }
    
    /**
     * Gets lastSeen
     * @return \DateTime
     */
    public function getLastSeen()
    {
        return $this->lastSeen;
    }
  
    /**
     * Sets lastSeen
     * @param \DateTime $lastSeen 
     * @return $this
     */
    public function setLastSeen($lastSeen)
    {
        
        $this->lastSeen = $lastSeen;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SMSGatewayMe\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SMSGatewayMe\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
